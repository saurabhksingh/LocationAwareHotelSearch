/*
	SDZRoomRateDetails.h
	The implementation of properties and methods for the SDZRoomRateDetails object.
	Generated by SudzC.com
*/
#import "SDZRoomRateDetails.h"

#import "SDZHotelRateInfo.h"
#import "SDZRateInfos.h"
#import "SDZValueAdds.h"
@implementation SDZRoomRateDetails
	@synthesize roomTypeCode = _roomTypeCode;
	@synthesize rateCode = _rateCode;
	@synthesize maxRoomOccupancy = _maxRoomOccupancy;
	@synthesize quotedRoomOccupancy = _quotedRoomOccupancy;
	@synthesize minGuestAge = _minGuestAge;
	@synthesize roomDescription = _roomDescription;
	@synthesize promoId = _promoId;
	@synthesize promoDescription = _promoDescription;
	@synthesize promoDetailText = _promoDetailText;
	@synthesize currentAllotment = _currentAllotment;
	@synthesize propertyAvailable = _propertyAvailable;
	@synthesize propertyRestricted = _propertyRestricted;
	@synthesize expediaPropertyId = _expediaPropertyId;
	@synthesize rateKey = _rateKey;
	@synthesize rateType = _rateType;
	@synthesize nonRefundable = _nonRefundable;
	@synthesize RateInfo = _RateInfo;
	@synthesize RateInfos = _RateInfos;
	@synthesize ValueAdds = _ValueAdds;

	- (id) init
	{
		if(self = [super init])
		{
			self.roomTypeCode = nil;
			self.rateCode = nil;
			self.roomDescription = nil;
			self.promoId = nil;
			self.promoDescription = nil;
			self.promoDetailText = nil;
			self.expediaPropertyId = nil;
			self.rateKey = nil;
			self.rateType = nil;
			self.RateInfo = nil; // [[SDZHotelRateInfo alloc] init];
			self.RateInfos = [[[NSMutableArray alloc] init] autorelease];
			self.ValueAdds = [[[NSMutableArray alloc] init] autorelease];

		}
		return self;
	}

	+ (SDZRoomRateDetails*) createWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (SDZRoomRateDetails*)[[[SDZRoomRateDetails alloc] initWithNode: node] autorelease];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.roomTypeCode = [Soap getNodeValue: node withName: @"roomTypeCode"];
			self.rateCode = [Soap getNodeValue: node withName: @"rateCode"];
			self.maxRoomOccupancy = [[Soap getNodeValue: node withName: @"maxRoomOccupancy"] intValue];
			self.quotedRoomOccupancy = [[Soap getNodeValue: node withName: @"quotedRoomOccupancy"] intValue];
			self.minGuestAge = [[Soap getNodeValue: node withName: @"minGuestAge"] intValue];
			self.roomDescription = [Soap getNodeValue: node withName: @"roomDescription"];
			self.promoId = [Soap getNodeValue: node withName: @"promoId"];
			self.promoDescription = [Soap getNodeValue: node withName: @"promoDescription"];
			self.promoDetailText = [Soap getNodeValue: node withName: @"promoDetailText"];
			self.currentAllotment = [[Soap getNodeValue: node withName: @"currentAllotment"] intValue];
			self.propertyAvailable = [[Soap getNodeValue: node withName: @"propertyAvailable"] boolValue];
			self.propertyRestricted = [[Soap getNodeValue: node withName: @"propertyRestricted"] boolValue];
			self.expediaPropertyId = [Soap getNodeValue: node withName: @"expediaPropertyId"];
			self.rateKey = [Soap getNodeValue: node withName: @"rateKey"];
			self.rateType = [Soap getNodeValue: node withName: @"rateType"];
			self.nonRefundable = [[Soap getNodeValue: node withName: @"nonRefundable"] boolValue];
			self.RateInfo = [[SDZHotelRateInfo createWithNode: [Soap getNode: node withName: @"RateInfo"]] object];
			self.RateInfos = [[SDZRateInfos createWithNode: [Soap getNode: node withName: @"RateInfos"]] object];
			self.ValueAdds = [[SDZValueAdds createWithNode: [Soap getNode: node withName: @"ValueAdds"]] object];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"RoomRateDetails"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		if (self.roomTypeCode != nil) [s appendFormat: @"<roomTypeCode>%@</roomTypeCode>", [[self.roomTypeCode stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.rateCode != nil) [s appendFormat: @"<rateCode>%@</rateCode>", [[self.rateCode stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<maxRoomOccupancy>%@</maxRoomOccupancy>", [NSString stringWithFormat: @"%i", self.maxRoomOccupancy]];
		[s appendFormat: @"<quotedRoomOccupancy>%@</quotedRoomOccupancy>", [NSString stringWithFormat: @"%i", self.quotedRoomOccupancy]];
		[s appendFormat: @"<minGuestAge>%@</minGuestAge>", [NSString stringWithFormat: @"%i", self.minGuestAge]];
		if (self.roomDescription != nil) [s appendFormat: @"<roomDescription>%@</roomDescription>", [[self.roomDescription stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.promoId != nil) [s appendFormat: @"<promoId>%@</promoId>", [[self.promoId stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.promoDescription != nil) [s appendFormat: @"<promoDescription>%@</promoDescription>", [[self.promoDescription stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.promoDetailText != nil) [s appendFormat: @"<promoDetailText>%@</promoDetailText>", [[self.promoDetailText stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<currentAllotment>%@</currentAllotment>", [NSString stringWithFormat: @"%i", self.currentAllotment]];
		[s appendFormat: @"<propertyAvailable>%@</propertyAvailable>", (self.propertyAvailable)?@"true":@"false"];
		[s appendFormat: @"<propertyRestricted>%@</propertyRestricted>", (self.propertyRestricted)?@"true":@"false"];
		if (self.expediaPropertyId != nil) [s appendFormat: @"<expediaPropertyId>%@</expediaPropertyId>", [[self.expediaPropertyId stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.rateKey != nil) [s appendFormat: @"<rateKey>%@</rateKey>", [[self.rateKey stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.rateType != nil) [s appendFormat: @"<rateType>%@</rateType>", [[self.rateType stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<nonRefundable>%@</nonRefundable>", (self.nonRefundable)?@"true":@"false"];
		if (self.RateInfo != nil) [s appendString: [self.RateInfo serialize: @"RateInfo"]];
		if (self.RateInfos != nil && self.RateInfos.count > 0) {
			[s appendFormat: @"<RateInfos>%@</RateInfos>", [SDZRateInfos serialize: self.RateInfos]];
		} else {
			[s appendString: @"<RateInfos/>"];
		}
		if (self.ValueAdds != nil && self.ValueAdds.count > 0) {
			[s appendFormat: @"<ValueAdds>%@</ValueAdds>", [SDZValueAdds serialize: self.ValueAdds]];
		} else {
			[s appendString: @"<ValueAdds/>"];
		}

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[SDZRoomRateDetails class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}
	
	- (void) dealloc
	{
		self.roomTypeCode = nil;
		self.rateCode = nil;
		self.roomDescription = nil;
		self.promoId = nil;
		self.promoDescription = nil;
		self.promoDetailText = nil;
		self.expediaPropertyId = nil;
		self.rateKey = nil;
		self.rateType = nil;
		self.RateInfo = nil;
		self.RateInfos = nil;
		self.ValueAdds = nil;
		[super dealloc];
	}

@end
