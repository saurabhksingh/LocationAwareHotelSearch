/*
	SDZLocationInfo.h
	The implementation of properties and methods for the SDZLocationInfo object.
	Generated by SudzC.com
*/
#import "SDZLocationInfo.h"

@implementation SDZLocationInfo
	@synthesize destinationId = _destinationId;
	@synthesize active = _active;
	@synthesize type = _type;
	@synthesize address = _address;
	@synthesize city = _city;
	@synthesize stateProvinceCode = _stateProvinceCode;
	@synthesize postalCode = _postalCode;
	@synthesize countryCode = _countryCode;
	@synthesize countryName = _countryName;
	@synthesize code = _code;
	@synthesize description = _description;
	@synthesize geoAccuracy = _geoAccuracy;
	@synthesize locationInDestination = _locationInDestination;
	@synthesize latitude = _latitude;
	@synthesize longitude = _longitude;
	@synthesize refLocationMileage = _refLocationMileage;
	@synthesize referenceLocationCode = _referenceLocationCode;
	@synthesize activePropertyCount = _activePropertyCount;

	- (id) init
	{
		if(self = [super init])
		{
			self.destinationId = nil;
			self.address = nil;
			self.city = nil;
			self.stateProvinceCode = nil;
			self.postalCode = nil;
			self.countryCode = nil;
			self.countryName = nil;
			self.code = nil;
			self.description = nil;
			self.referenceLocationCode = nil;

		}
		return self;
	}

	+ (SDZLocationInfo*) createWithNode: (CXMLNode*) node
	{
		if(node == nil) { return nil; }
		return (SDZLocationInfo*)[[[SDZLocationInfo alloc] initWithNode: node] autorelease];
	}

	- (id) initWithNode: (CXMLNode*) node {
		if(self = [super initWithNode: node])
		{
			self.destinationId = [Soap getNodeValue: node withName: @"destinationId"];
			self.active = [[Soap getNodeValue: node withName: @"active"] boolValue];
			self.type = [[Soap getNodeValue: node withName: @"type"] intValue];
			self.address = [Soap getNodeValue: node withName: @"address"];
			self.city = [Soap getNodeValue: node withName: @"city"];
			self.stateProvinceCode = [Soap getNodeValue: node withName: @"stateProvinceCode"];
			self.postalCode = [Soap getNodeValue: node withName: @"postalCode"];
			self.countryCode = [Soap getNodeValue: node withName: @"countryCode"];
			self.countryName = [Soap getNodeValue: node withName: @"countryName"];
			self.code = [Soap getNodeValue: node withName: @"code"];
			self.description = [Soap getNodeValue: node withName: @"description"];
			self.geoAccuracy = [[Soap getNodeValue: node withName: @"geoAccuracy"] intValue];
			self.locationInDestination = [[Soap getNodeValue: node withName: @"locationInDestination"] boolValue];
			self.latitude = [[Soap getNodeValue: node withName: @"latitude"] floatValue];
			self.longitude = [[Soap getNodeValue: node withName: @"longitude"] floatValue];
			self.refLocationMileage = [[Soap getNodeValue: node withName: @"refLocationMileage"] floatValue];
			self.referenceLocationCode = [Soap getNodeValue: node withName: @"referenceLocationCode"];
			self.activePropertyCount = [[Soap getNodeValue: node withName: @"activePropertyCount"] intValue];
		}
		return self;
	}

	- (NSMutableString*) serialize
	{
		return [self serialize: @"LocationInfo"];
	}
  
	- (NSMutableString*) serialize: (NSString*) nodeName
	{
		NSMutableString* s = [NSMutableString string];
		[s appendFormat: @"<%@", nodeName];
		[s appendString: [self serializeAttributes]];
		[s appendString: @">"];
		[s appendString: [self serializeElements]];
		[s appendFormat: @"</%@>", nodeName];
		return s;
	}
	
	- (NSMutableString*) serializeElements
	{
		NSMutableString* s = [super serializeElements];
		if (self.destinationId != nil) [s appendFormat: @"<destinationId>%@</destinationId>", [[self.destinationId stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<active>%@</active>", (self.active)?@"true":@"false"];
		[s appendFormat: @"<type>%@</type>", [NSString stringWithFormat: @"%i", self.type]];
		if (self.address != nil) [s appendFormat: @"<address>%@</address>", [[self.address stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.city != nil) [s appendFormat: @"<city>%@</city>", [[self.city stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.stateProvinceCode != nil) [s appendFormat: @"<stateProvinceCode>%@</stateProvinceCode>", [[self.stateProvinceCode stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.postalCode != nil) [s appendFormat: @"<postalCode>%@</postalCode>", [[self.postalCode stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.countryCode != nil) [s appendFormat: @"<countryCode>%@</countryCode>", [[self.countryCode stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.countryName != nil) [s appendFormat: @"<countryName>%@</countryName>", [[self.countryName stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.code != nil) [s appendFormat: @"<code>%@</code>", [[self.code stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		if (self.description != nil) [s appendFormat: @"<description>%@</description>", [[self.description stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<geoAccuracy>%@</geoAccuracy>", [NSString stringWithFormat: @"%i", self.geoAccuracy]];
		[s appendFormat: @"<locationInDestination>%@</locationInDestination>", (self.locationInDestination)?@"true":@"false"];
		[s appendFormat: @"<latitude>%@</latitude>", [NSString stringWithFormat: @"%f", self.latitude]];
		[s appendFormat: @"<longitude>%@</longitude>", [NSString stringWithFormat: @"%f", self.longitude]];
		[s appendFormat: @"<refLocationMileage>%@</refLocationMileage>", [NSString stringWithFormat: @"%f", self.refLocationMileage]];
		if (self.referenceLocationCode != nil) [s appendFormat: @"<referenceLocationCode>%@</referenceLocationCode>", [[self.referenceLocationCode stringByReplacingOccurrencesOfString:@"\"" withString:@"&quot;"] stringByReplacingOccurrencesOfString:@"&" withString:@"&amp;"]];
		[s appendFormat: @"<activePropertyCount>%@</activePropertyCount>", [NSString stringWithFormat: @"%i", self.activePropertyCount]];

		return s;
	}
	
	- (NSMutableString*) serializeAttributes
	{
		NSMutableString* s = [super serializeAttributes];

		return s;
	}
	
	-(BOOL)isEqual:(id)object{
		if(object != nil && [object isKindOfClass:[SDZLocationInfo class]]) {
			return [[self serialize] isEqualToString:[object serialize]];
		}
		return NO;
	}
	
	-(NSUInteger)hash{
		return [Soap generateHash:self];

	}
	
	- (void) dealloc
	{
		self.destinationId = nil;
		self.address = nil;
		self.city = nil;
		self.stateProvinceCode = nil;
		self.postalCode = nil;
		self.countryCode = nil;
		self.countryName = nil;
		self.code = nil;
		self.description = nil;
		self.referenceLocationCode = nil;
		[super dealloc];
	}

@end
